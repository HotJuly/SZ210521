1.props
	适用场景:父子组件之间通信
	父传子
		1.在父组件中,给子组件标签添加标签属性(属性值为数据)
		2.在子组件的配置对象中,添加props属性,并声明需要接收的标签属性

	子传父
		1.在父组件中,给子组件标签添加标签属性(属性值为父组件methods中的函数)
			注意:methods中声明的函数的this指向一定都是当前组件实例对象
		2.在子组件的配置对象中,添加props属性,并声明需要接收的标签属性
		3.子组件调用父组件传递下来的函数,并向函数内部传入实参即可

2.provide/inject
	适用场景:祖孙组件之间通信
	流程:
		1.父组件在配置对象中,添加provide属性,属性值为对象
			在该对象中添加属性名和属性值
		3.在后代组件的配置对象中,添加inject属性,属性值为数组
			数组内部书写需要接收的属性名即可

	注意点:
		1.provide暴露的对象默认是非响应式的
		2.如果需要暴露出去的是响应式对象,需要自己创建
			Vue.observable(普通对象)
		3.如果存在多个provide对象,inject查找属性的顺序会由内向外查找

3.自定义事件
	给html标签绑定的事件就是原生事件
	给Vue组件绑定的事件就是自定义事件
	v-model
		1.对input标签使用
			-可以将data状态当作input框的默认值进行显示(动态设置value值即可)
    				<input type="text" :value="phone">
			-当用户修改input框内容时,需要同步修改data中的对应状态(给input框绑定input事件)
    				<input type="text" @input="event=>phone=event.target.value">
		2.对组件使用
			-可以将data状态当作标签属性传递给子组件(动态设置value值即可)
			-父组件会给子组件绑定自定义事件(事件名称为input)
			可以通过model配置对象,动态设置v-model的默认标签属性名和事件名

	.sync修饰符
		-可以将data状态当作标签属性传递给子组件(属性名自定义)
		-父组件会给子组件绑定自定义事件(事件名称为update:属性名)
		可以通过model配置对象,动态设置v-model的默认标签属性名和事件名

	全局事件总线
		优点:可以无视多个组件之间的关系进行通信
		注意点:
			订阅操作必须在发布之前
			订阅者和发布者必须同时存在
		流程:
			1.在Vue的原型对象上,创建$bus属性,并在内部放置一个Vue对象
				Vue.prototype.$bus = new Vue()
			2.在需要接收数据的组件内部,声明method函数,并给$bus绑定自定义事件
				this.$bus.$on('事件名',method函数)
				注意:此处是在给$bus绑定自定义事件
			3.在需要发送数据的组件内部,触发$bus身上的对应自定义事件
				this.$bus.$emit('事件名',发送的数据)

			注意:使用完该自定义事件,记得解绑

	$on,$emit,$off,$once

4.查找组件实例
	$parent	->	用于找到父组件的组件实例对象
	$children	->	用于找到所有的子组件对象组成的数组
		该数组不是响应式的,他的排列顺序不会影响页面的显示顺序
	$root	->	用于找到项目根组件实例(Root组件)
	$refs	->	用于找到对应标签或者组件
		该属性需要和ref标签属打配合
		-用于html标签身上
			可以获得对应标签的真实DOM
		-用于组件标签身上
			可以获得到对应标签的组件实例对象

5.$attrs,$listeners
	$attrs	->	用于收集未被props接收的标签属性
	$listeners	->	用于收集当前组件自身所有的自定义事件

